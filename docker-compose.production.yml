version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  # MongoDB with optimized configuration
  mongodb:
    image: mongo:7
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb.conf:/etc/mongod.conf
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    command: mongod --config /etc/mongod.conf

  # Multiple backend instances with load balancing
  backend-1:
    build: ./backend
    restart: always
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/observer_ai?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - WORKERS=4
    depends_on:
      - mongodb
      - redis
    command: uvicorn server:app --host 0.0.0.0 --port 8001 --workers 4

  backend-2:
    build: ./backend
    restart: always
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/observer_ai?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - WORKERS=4
    depends_on:
      - mongodb
      - redis
    command: uvicorn server:app --host 0.0.0.0 --port 8001 --workers 4

  backend-3:
    build: ./backend
    restart: always
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/observer_ai?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - WORKERS=4
    depends_on:
      - mongodb
      - redis
    command: uvicorn server:app --host 0.0.0.0 --port 8001 --workers 4

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend

  # Frontend with optimization
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.production
    restart: always
    environment:
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
    command: serve -s build -l 3000

  # Monitoring stack
  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data: